/*
* Find the Difference
You are given two strings s and t.
String t is generated by random shuffling string s and then add one more letter at a random position.
Return the letter that was added to t.

Example 1:
Input: s = "abcd", t = "abcde"
Output: "e"
Explanation: 'e' is the letter that was added.

Example 2:
Input: s = "", t = "y"
Output: "y"
*/

fun main(args: Array<String>) {
    val result = findTheDifference("abcd","abcde")
    print(result)
}

fun findTheDifference(s: String, t: String): Char {
    var s1 = s.toList().sorted()
    var s2 = t.toList().sorted()

    for(index in t.indices)
        if(index >= s.length || t[index] != s[index])
            return t[index]
    return t[0]
}

fun findTheDifference(s: String, t: String): Char {
    var builder = StringBuilder(t)

    s.forEach {
        builder.deleteCharAt(builder.indexOf(it))
    }

    return builder.toString()[0]
}

fun findTheDifference(s: String, t: String): Char {
    var sum1 = 0
    var sum2 = 0

    for(ch in s)
        sum1 += ch.toInt()

    for(ch in t)
        sum2 += ch.toInt()

    return (sum2 - sum1).toChar()
}

fun findTheDifference(s: String, t: String) : String {
    return (t.sumBy { it.toInt() } - s.sumBy { it.toInt() }).toChar()
}

class Solution {
    fun findTheDifference(s: String, t: String): Char {
        val setS = s.toHashSet()
        val setT = t.toHashSet()

        if (setS.size == setT.size) {
            val hashMapS = mutableMapOf<Char, Int>()
            val hashMapT = mutableMapOf<Char, Int>()
            var charCountS = 0
            var charCountT = 0
            for (alphabet in 'a' ..'z') {
                charCountS = s.count { it == alphabet }
                hashMapS[alphabet] = charCountS

                charCountT = t.count { it == alphabet }
                hashMapT[alphabet] = charCountT

                if (charCountT > charCountS)
                    return alphabet
            }
        }
        val charNew = setT - setS
        return charNew.elementAt(0)
    }
}

fun findTheDifference(s: String, t: String): Char {
    var result = 0

    for (c in s)
        result = result xor c.toInt()

    for (c in t)
        result = result xor c.toInt()

    return result.toChar()
}

fun findTheDifference(s: String, t: String): Char {
    val charArray = IntArray(26)

    t.forEach { charArray[it - 'a']++ }
    s.forEach { charArray[it - 'a']-- }

    return (charArray.indexOfFirst { it > 0 } + 65).toChar().toLowerCase()
}

fun findTheDifference(s: String, t: String): Char {
    return s.foldIndexed(t[0].toInt()) { idx, acc, ch ->
        acc + t[idx + 1].toInt() - ch.toInt()
    }.toChar()
}

fun findTheDifference(s: String, t: String): Char {
    var sMap: MutableMap<Char,Int> = mutableMapOf()
    var tMap: MutableMap<Char,Int> = mutableMapOf()

    s.forEach {
        sMap.put(it, sMap.getOrDefault(it, 0) + 1)
    }

    t.forEach {
        tMap.put(it, tMap.getOrDefault(it, 0) + 1)
}

    tMap.forEach { (key, value) ->
        if(!sMap.contains(key) || sMap.get(key) != value)
            return key
    }

    return '\u0000'
}
